from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ConversationHandler

# —ç—Ç–∞–ø—ã –±–æ—Ç–∞
ASK_NAME, CHOOSE_STATUS, ENTER_CODE, ADD_GROUP, ENTER_GROUP, ENTER_ANOTHER_MEMBER = range(6)

codes = {
    "üë®‚Äçüíª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä": "1",
    "üë®‚Äçüéì –°—Ç–∞—Ä–æ—Å—Ç–∞": "2",
    "üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å": "3",
}

# —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞, –≤–≤–æ–¥ —Ñ–∏–æ
async def start(update: Update, context):
    message = "üëã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
    await update.message.reply_text(message, reply_markup=ReplyKeyboardRemove())
    return ASK_NAME

async def ask_name(update: Update, context):
    full_name = update.message.text
    context.user_data['full_name'] = full_name

    message = "üëá–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å:"
    reply_keyboard = [['üéì –°—Ç—É–¥–µ–Ω—Ç', 'üë®‚Äçüéì –°—Ç–∞—Ä–æ—Å—Ç–∞'], ['üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', 'üë®‚Äçüíª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä']]

    await update.message.reply_text(
        message,
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return CHOOSE_STATUS

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
async def choose_status(update: Update, context):
    user_status = update.message.text
    context.user_data['status'] = user_status

    await update.message.reply_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {user_status}. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞:",
        reply_markup=ReplyKeyboardMarkup([['üîô–ù–∞–∑–∞–¥']], resize_keyboard=True)
    )
    return ENTER_CODE

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞
async def enter_code(update: Update, context):
    entered_code = update.message.text
    user_status = context.user_data['status']

    if entered_code == 'üîô–ù–∞–∑–∞–¥':
        await update.message.reply_text(
            "–í—ã–±–æ—Ä —Å—Ç–∞—Ç—É—Å–∞:",
            reply_markup=ReplyKeyboardMarkup(
                [['üéì –°—Ç—É–¥–µ–Ω—Ç', 'üë®‚Äçüéì –°—Ç–∞—Ä–æ—Å—Ç–∞'], ['üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', 'üë®‚Äçüíª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä']],
                resize_keyboard=True
            )
        )
        return CHOOSE_STATUS

    correct_code = codes.get(user_status)

    if correct_code and entered_code == correct_code:
        await update.message.reply_text(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –∫–∞–∫ {user_status}. –í–∞—à–µ –§–ò–û: {context.user_data['full_name']}")

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Å—Ç–∞—Ä–æ—Å—Ç—ã
        if user_status == 'üë®‚Äçüéì –°—Ç–∞—Ä–æ—Å—Ç–∞':
            message = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            reply_keyboard = [['‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É'], ['üîô –ù–∞–∑–∞–¥']]  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –¥–æ–±–∞–≤–ª–µ–Ω–∞
            await update.message.reply_text(
                message,
                reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
            )
            return ADD_GROUP

        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∞—Ç—É—Å–∞:",
            reply_markup=ReplyKeyboardMarkup([['üîô–ù–∞–∑–∞–¥']], resize_keyboard=True)
        )
        return ENTER_CODE

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
async def add_group(update: Update, context):
    user_action = update.message.text

    if user_action == 'üîô –ù–∞–∑–∞–¥':
        return await choose_status(update, context)

    if user_action == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É':
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:")
        return ENTER_GROUP

async def enter_group(update: Update, context):
    group_number = update.message.text
    context.user_data['group_number'] = group_number

    await update.message.reply_text(f"–ì—Ä—É–ø–ø–∞ {group_number} –¥–æ–±–∞–≤–ª–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –§–ò–û —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã:")
    context.user_data['members'] = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    return ENTER_ANOTHER_MEMBER

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –æ–¥–Ω–æ–º—É
async def enter_another_member(update: Update, context):
    member_name = update.message.text
    context.user_data['members'].append(member_name.strip())  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –§–ò–û —É—á–∞—Å—Ç–Ω–∏–∫–∞

    await update.message.reply_text(f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ '{member_name.strip()}' –¥–æ–±–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞:",
                                     reply_markup=ReplyKeyboardMarkup([['‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å']], resize_keyboard=True))
    
    return ENTER_ANOTHER_MEMBER

async def finish_members(update: Update, context):
    if update.message.text == '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å':
        await update.message.reply_text(f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã {context.user_data['group_number']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n" + 
                                         "\n".join(context.user_data['members']))
        return ConversationHandler.END
    
    return await enter_another_member(update, context)

# –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    TOKEN = "7500268240:AAEtuPOniFFCnaHSW55eUfe392egvxDONWU"  # –í–∞—à —Ç–æ–∫–µ–Ω
    application = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            CHOOSE_STATUS: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_status)],
            ENTER_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_code)],
            ADD_GROUP: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_group)],
            ENTER_GROUP: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_group)],
            ENTER_ANOTHER_MEMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, finish_members)],
        },
        fallbacks=[CommandHandler("start", start)],
    )

    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == '__main__':
    main()
