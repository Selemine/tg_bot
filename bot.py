import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ConversationHandler, CallbackQueryHandler
from datetime import datetime
import hashlib
import db_functions

#—Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
db_functions.create_tables()

# —ç—Ç–∞–ø—ã 
ASK_NAME, CHOOSE_STATUS, ENTER_CODE, ADD_GROUP, ENTER_GROUP, ENTER_ANOTHER_MEMBER, CONFIRM_GROUP, ADD_SUBJECT, JOIN_SUBJECT, SELECT_SUBJECT, CREATE_SUBJECT, CHOOSE_GROUP,MARK_STUDENT = range(13)

# –∫–æ–¥—ã 
codes = {
    "üë®‚Äçüíª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä": "1",
    "üë®‚Äçüéì –°—Ç–∞—Ä–æ—Å—Ç–∞": "2",
    "üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å": "3",
}

# –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO) 
logger = logging.getLogger()
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("httpcore").setLevel(logging.WARNING)
logging.getLogger("telegram.ext").setLevel(logging.WARNING)

# —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def start(update: Update, context):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.")
    await update.message.reply_text("üëã  –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=ReplyKeyboardRemove())
    return ASK_NAME

async def ask_name(update: Update, context):
    context.user_data['full_name'] = update.message.text
    message = "üëá –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å:"
    reply_keyboard = [
        ['üéì –°—Ç—É–¥–µ–Ω—Ç', 'üë®‚Äçüéì –°—Ç–∞—Ä–æ—Å—Ç–∞'],
        ['üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', 'üë®‚Äçüíª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'],
        ['‚óÄÔ∏è']
    ]
    await update.message.reply_text(
        message,
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
    )
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å—Ç–∞—Ç—É—Å.")
    return CHOOSE_STATUS

async def choose_status(update: Update, context):
    user_status = update.message.text
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å—Ç–∞—Ç—É—Å: {user_status}")

    if user_status == '‚óÄÔ∏è':
        await update.message.reply_text("üëã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=ReplyKeyboardRemove())
        return ASK_NAME

    context.user_data['status'] = user_status

    if user_status == 'üéì –°—Ç—É–¥–µ–Ω—Ç':
        full_name = context.user_data['full_name']
        group_info = db_functions.get_student_group_info(full_name)

        if group_info:
            await update.message.reply_text(
                f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –∫–∞–∫ {user_status}. –í–∞—à–µ –§–ò–û: {full_name}\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ:\n{group_info}",
                parse_mode="HTML"
            )
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=ReplyKeyboardMarkup([['üîç –í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç']], resize_keyboard=True)
            )
        else:
            await update.message.reply_text(
                f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –∫–∞–∫ {user_status}. –í–∞—à–µ –§–ò–û: {full_name}\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
            )
        return ConversationHandler.END

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞:", reply_markup=ReplyKeyboardMarkup([['‚óÄÔ∏è']], resize_keyboard=True))
    return ENTER_CODE

# –≤–≤–æ–¥ –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞
async def enter_code(update: Update, context):
    entered_code = update.message.text
    user_status = context.user_data['status']
    correct_code = codes.get(user_status)

    if entered_code == '‚óÄÔ∏è':
        message = "üëá –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å:"
        reply_keyboard = [['üéì –°—Ç—É–¥–µ–Ω—Ç', 'üë®‚Äçüéì –°—Ç–∞—Ä–æ—Å—Ç–∞'], ['üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', 'üë®‚Äçüíª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä']]
        await update.message.reply_text(message, reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
        return CHOOSE_STATUS

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞
    if entered_code == correct_code:
        full_name = context.user_data['full_name']
        chat_id = update.message.chat_id
        logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {user_status}, –§–ò–û: {full_name}")

        if user_status == 'üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å':
            db_functions.add_teacher(full_name, chat_id)

        if user_status == 'üë®‚Äçüéì –°—Ç–∞—Ä–æ—Å—Ç–∞':
            await update.message.reply_text(f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –∫–∞–∫ {user_status}.\n–í–∞—à–µ –§–ò–û: {full_name}")
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:")
            return ENTER_GROUP

        elif user_status == 'üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å':
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                            reply_markup=ReplyKeyboardMarkup([['üìö –î–æ–±–∞–≤–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É', 'üìÖ –ü—Ä–æ–≤–µ—Å—Ç–∏ –∑–∞–Ω—è—Ç–∏–µ']], resize_keyboard=True))
            return ADD_SUBJECT

        return ConversationHandler.END
    
    # –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥
    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥:",
                                    reply_markup=ReplyKeyboardMarkup([['‚óÄÔ∏è']], resize_keyboard=True))
    return ENTER_CODE

# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
async def add_group(update: Update, context):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:")
    return ENTER_GROUP

async def enter_group(update: Update, context):
    group_number = update.message.text
    context.user_data['group_number'] = group_number
    db_functions.create_group(group_number, context.user_data['full_name'])
    logger.info(f"–ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞: {group_number}")

    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ chat id —Å—Ç–∞—Ä–æ—Å—Ç—ã
    chat_id = update.message.chat_id
    db_functions.add_teacher(context.user_data['full_name'], chat_id)
    logger.info(f"Chat ID —Å—Ç–∞—Ä–æ—Å—Ç—ã {context.user_data['full_name']} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {chat_id}")

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –§–ò–û —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã:", reply_markup=ReplyKeyboardMarkup([['‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å']], resize_keyboard=True))
    context.user_data['members'] = []
    return ENTER_ANOTHER_MEMBER

# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã 
async def enter_another_member(update: Update, context):
    member_name = update.message.text

    if member_name == '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å':
        return await confirm_group(update, context)

    context.user_data['members'].append(member_name.strip())
    db_functions.add_member(member_name.strip(), context.user_data['group_number'])
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å':")
    return ENTER_ANOTHER_MEMBER

# –≤—ã–≤–æ–¥ –∏–Ω—Ñ—ã –æ –≥—Ä—É–ø–ø–µ 
async def confirm_group(update: Update, context):
    group_number = context.user_data['group_number']
    members = context.user_data['members'] 
    leader = context.user_data['full_name'] 
    number_of_members = len(members) + 1
    group_info = f"     <u>{group_number}</u>     \n" 
    group_info += "\n" 
    group_info += f"<i>–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã ({number_of_members})</i>\n" 
    group_info += "\n" 
    sorted_members = sorted([leader] + members) 
    for member in sorted_members:
        if member == leader:
            group_info += f"<b>{member}</b>  üë®‚Äçüéì\n"  
        else:
            group_info += f"{member}\n"

    await update.message.reply_text(group_info, parse_mode="HTML")
    await update.message.reply_text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã:", reply_markup=ReplyKeyboardMarkup([['‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å']], resize_keyboard=True))
    return CONFIRM_GROUP

async def confirm_group_action(update: Update, context):
    action = update.message.text

    if action == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        await update.message.reply_text("‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                                        reply_markup=ReplyKeyboardMarkup([['üìö –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ', 'üîç –í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç']], resize_keyboard=True))
        return JOIN_SUBJECT

    elif action == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
        await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return ADD_GROUP

# –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ
async def join_subject(update: Update, context):
    logger.debug("Join subject function triggered.")
    if update.message.text != "üìö –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ":
        logger.info(f"–ù–µ–≤–µ—Ä–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞: {update.message.text}. –û–∂–∏–¥–∞–ª–∞—Å—å –∫–Ω–æ–ø–∫–∞ 'üìö –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ'.")
        return

    subjects_with_teachers = db_functions.get_all_subjects_with_teachers()

    if not subjects_with_teachers:
        logger.info("–ù–µ—Ç –¥–∏—Å—Ü–∏–ø–ª–∏–Ω —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏.")
        await update.message.reply_text("‚ö†Ô∏è –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return ConversationHandler.END

    subjects_with_teachers.sort(key=lambda x: x[0].lower())  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)

    keyboard = [
        [InlineKeyboardButton(f"{subject} ‚Äî {teacher}", callback_data=subject)]
        for subject, teacher in subjects_with_teachers
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:", reply_markup=reply_markup)
    return SELECT_SUBJECT

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
async def select_subject(update: Update, context):
    query = update.callback_query
    await query.answer()

    selected_subject = query.data
    context.user_data['selected_subject'] = selected_subject
    group_number = context.user_data.get('group_number')

    # –ü–†–û–í–ï–†–ö–ê!!!     –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∞—Å—å –ª–∏ –£–ñ–ï —ç—Ç–∞ –≥—Ä—É–ø–ø–∞ –∫ —ç—Ç–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ
    if db_functions.is_group_already_joined(group_number, selected_subject):
        await query.message.reply_text("‚ö†Ô∏è –í–∞—à–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∞—Å—å –∫ —ç—Ç–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ.")
        await query.message.edit_reply_markup(None)
        return JOIN_SUBJECT

    teacher_name = db_functions.get_teacher_by_subject(selected_subject)
    if not teacher_name:
        await query.message.reply_text("‚ö†Ô∏è –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return JOIN_SUBJECT

    # –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∞—Å—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥—É
    teacher_chat_id = db_functions.get_teacher_chat_id(teacher_name)
    if teacher_chat_id:
        await query.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É '{selected_subject}'. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º.")
        await context.bot.send_message(
            teacher_chat_id,
            f"–ì—Ä—É–ø–ø–∞ {group_number} —Ö–æ—á–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ '{selected_subject}'.\n\n",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{group_number}_{selected_subject}"),
                                                InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{group_number}_{selected_subject}")]]),
        )
    else:
        await query.message.reply_text("‚ö†Ô∏è –£ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ chat_id.")

    await query.message.edit_reply_markup(None)

    # –≤–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é —Å—Ç–∞—Ä–æ—Å—Ç—ã
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                   reply_markup=ReplyKeyboardMarkup([['üìö –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ', 'üîç –í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç']], resize_keyboard=True))
    return JOIN_SUBJECT

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–µ–ø–æ–¥–∞
async def handle_teacher_response(update: Update, context):
    query = update.callback_query
    await query.answer()

    data = query.data
    logger.debug(f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª: {data}")

    if data.startswith("approve_"):
        _, group_number, subject = data.split("_")
        logger.debug(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã: –≥—Ä—É–ø–ø–∞ {group_number}, –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ {subject}")

        # —Å–≤—è–∑—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É —Å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–æ–π –≤ –±–¥
        db_functions.add_group_to_subject(group_number, subject)
        logger.debug(f"–ì—Ä—É–ø–ø–∞ {group_number} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ {subject}")

        # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞, –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É—è –µ–≥–æ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
        await query.edit_message_text(
            text=f"‚úÖ –ó–∞—è–≤–∫–∞ –≥—Ä—É–ø–ø—ã {group_number} –Ω–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É '{subject}' –æ–¥–æ–±—Ä–µ–Ω–∞.",
            reply_markup=None
        )

        # —É–≤–µ–¥ —Å—Ç–∞—Ä–æ—Å—Ç–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
        leader_chat_id = db_functions.get_leader_chat_id(group_number)
        logger.debug(f"–ß–∞—Ç —Å—Ç–∞—Ä–æ—Å—Ç—ã: {leader_chat_id}")
        if leader_chat_id:
            await context.bot.send_message(leader_chat_id, f"‚úÖ –í–∞—à–∞ –≥—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∞—Å—å –∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ '{subject}'.")

    elif data.startswith("reject_"):
        _, group_number, subject = data.split("_")
        logger.debug(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã: –≥—Ä—É–ø–ø–∞ {group_number}, –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ {subject}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        await query.edit_message_text(
            text=f"‚ùå –ó–∞—è–≤–∫–∞ –≥—Ä—É–ø–ø—ã {group_number} –Ω–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É '{subject}' –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.",
            reply_markup=None
        )

        # —É–≤–µ–¥ —Å—Ç–∞—Ä–æ—Å—Ç–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
        leader_chat_id = db_functions.get_leader_chat_id(group_number)
        if leader_chat_id:
            await context.bot.send_message(leader_chat_id, f"‚ùå –ó–∞—è–≤–∫–∞ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –Ω–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É '{subject}' –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    return JOIN_SUBJECT

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ - –î–æ–±–∞–≤–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É
async def add_subject(update: Update, context):
    if update.message.text == "üìö –î–æ–±–∞–≤–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:")
        return CREATE_SUBJECT
    await update.message.reply_text("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
    return ADD_SUBJECT 

async def save_subject(update: Update, context):
    subject_name = update.message.text
    teacher_name = context.user_data['full_name']
    db_functions.add_subject(subject_name, teacher_name)
    await update.message.reply_text(f"‚úÖ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ '{subject_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                    reply_markup=ReplyKeyboardMarkup([['üìö –î–æ–±–∞–≤–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É', 'üìÖ –ü—Ä–æ–≤–µ—Å—Ç–∏ –∑–∞–Ω—è—Ç–∏–µ']], resize_keyboard=True))
    return ADD_SUBJECT

# –ø–æ–∫–∞–∑–∞—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∫ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ 
async def view_subjects(update: Update, context):
    full_name = context.user_data['full_name']
    group_number = db_functions.get_student_group(full_name)
    if not group_number:
        logger.error("Group number not found for the user.")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ.")
        return

    subjects = db_functions.get_subjects_for_group(group_number)
    if not subjects:
        logger.info(f"No subjects found for group {group_number}.")
        await update.message.reply_text("‚ùå –í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∞—Å—å –Ω–∏ –∫ –æ–¥–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ.")
        return

    keyboard = [
        [InlineKeyboardButton(subject, callback_data=subject)] for subject in subjects
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=reply_markup)

async def cancel(update: Update, context):
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

async def conduct_class(update: Update, context):
    teacher_name = context.user_data['full_name']

    subjects = sorted(db_functions.get_subjects_by_teacher(teacher_name)) 

    if not subjects:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.")
        return ADD_SUBJECT
 
    keyboard = [
        [InlineKeyboardButton(subject, callback_data=f"conduct_{subject}")] for subject in subjects
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è:",
        reply_markup=reply_markup
    )
    return SELECT_SUBJECT 

async def select_class_subject(update: Update, context):
    query = update.callback_query
    await query.answer()
    selected_subject = query.data.split("_", 1)[1]
    context.user_data['selected_subject'] = selected_subject
    groups = sorted(db_functions.get_groups_by_subject(selected_subject))

    if not groups:
        await query.edit_message_text(f"‚ö†Ô∏è –ù–µ—Ç –≥—Ä—É–ø–ø, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–æ–π '{selected_subject}'.")
        return ADD_SUBJECT

    group_buttons = [
        [InlineKeyboardButton(group, callback_data=f"group_{group}")] for group in groups
    ]
    group_buttons.append([InlineKeyboardButton("‚úÖ", callback_data="confirm"),
                          InlineKeyboardButton("‚óÄÔ∏è", callback_data="back_to_subjects")])

    context.user_data['selected_groups'] = []

    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è:",
        reply_markup=InlineKeyboardMarkup(group_buttons)
    )
    return CHOOSE_GROUP  # —Ö–∑ –ø–æ –¥—Ä—É–≥–æ–º—É –Ω–µ —Ä–æ–±–∏–ª–æ, –≤ –ø–∞–¥–ª—É –¥—É–º–∞—Ç—å –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∫–∞–∫ –∏ –æ—Å—Ç–ª–∞—å–Ω–æ–µ 

async def toggle_group_selection(update: Update, context):
    query = update.callback_query
    await query.answer()
    callback_data = query.data

    if callback_data.startswith("group_"):
        # –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
        group_name = callback_data.split("_")[1]
        selected_groups = context.user_data.get('selected_groups', [])

        if group_name in selected_groups:
            selected_groups.remove(group_name)
        else:
            selected_groups.append(group_name)

        context.user_data['selected_groups'] = selected_groups

        # –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
        selected_text = "\n".join([f"<i>{group}</i>" for group in selected_groups]) if selected_groups else "<i>–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.</i>"
        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n\n{selected_text}",
            reply_markup=query.message.reply_markup,
            parse_mode="HTML"
        )

    elif callback_data == "confirm":
        # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥—Ä—É–ø–ø
        selected_groups = context.user_data.get('selected_groups', [])
        if not selected_groups:
            await query.answer("‚ö†Ô∏è –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã!")
            return

        selected_groups_text = "<i>" + "</i>, <i>".join(selected_groups) + "</i>"
        await query.edit_message_text(
            f"‚úÖ –ì—Ä—É–ø–ø—ã –≤—ã–±—Ä–∞–Ω—ã:\n\n{selected_groups_text}.",
            reply_markup=None,
            parse_mode="HTML"
        )
        await start_marking_students(query, context)

        return MARK_STUDENT 

    elif callback_data == "back_to_subjects":
        # –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
        teacher_name = context.user_data.get('full_name')
        subjects = db_functions.get_subjects_by_teacher(teacher_name)

        if not subjects:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.")
            return ADD_SUBJECT

        keyboard = [
            [InlineKeyboardButton(subject, callback_data=f"conduct_{subject}")] for subject in subjects
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è:",
            reply_markup=reply_markup
        )

        return SELECT_SUBJECT
    return CHOOSE_GROUP

def generate_student_id(student_name):
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Ö—ç—à–∞ –¥–ª—è –∏–º–µ–Ω–∏
    return hashlib.md5(student_name.encode()).hexdigest()[:8]

def generate_student_keyboard(student_id):
    keyboard = [
        [
            InlineKeyboardButton("2Ô∏è‚É£", callback_data=f"mark_2_{student_id}"),
            InlineKeyboardButton("3Ô∏è‚É£", callback_data=f"mark_3_{student_id}"),
            InlineKeyboardButton("4Ô∏è‚É£", callback_data=f"mark_4_{student_id}"),
            InlineKeyboardButton("5Ô∏è‚É£", callback_data=f"mark_5_{student_id}"),
            InlineKeyboardButton("‚úÖ", callback_data=f"mark_present_{student_id}"),
            InlineKeyboardButton("‚ùå", callback_data=f"mark_absent_{student_id}")
        ],
        [
            InlineKeyboardButton("<<", callback_data="move_back"),
            InlineKeyboardButton("<", callback_data="prev_student"),
            InlineKeyboardButton(">", callback_data="next_student"),
            InlineKeyboardButton(">>", callback_data="move_forward")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start_marking_students(query: Update, context):
    selected_groups = context.user_data.get('selected_groups', [])
    if not selected_groups:
        await query.edit_message_text("‚ö†Ô∏è –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è.")
        return

    group_number = selected_groups[0]
    context.user_data['current_group_number'] = group_number  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã
    students = db_functions.get_students_by_group(group_number)

    if not students:  
        await query.edit_message_text("‚ö†Ô∏è –í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
        return

    logger.info(f"–°—Ç—É–¥–µ–Ω—Ç—ã –≤ –≥—Ä—É–ø–ø–µ {group_number}: {students}")

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    sorted_students = sorted(students, key=lambda x: x[0])
    context.user_data['sorted_students'] = sorted_students
    context.user_data['current_student_index'] = 0  # –ò–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞

    # –°–æ–∑–¥–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ student_id -> student_name
    student_mapping = {generate_student_id(name): name for name in sorted_students}
    context.user_data['student_mapping'] = student_mapping

    # –ü–µ—Ä–≤—ã–π —Å—Ç—É–¥–µ–Ω—Ç
    student_name = sorted_students[0]

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫–∏
    selected_marks = context.user_data.get('marks', {})

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = generate_student_keyboard(generate_student_id(student_name))

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å –µ–≥–æ –æ—Ü–µ–Ω–∫–æ–π
    mark_text = selected_marks.get(student_name, "")
    await query.edit_message_text(
        f"–ì—Ä—É–ø–ø–∞: <b>{group_number}</b>\n\n<i>{student_name}</i> {mark_text}",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {group_number}, {student_name}")
    
    # –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è
    await show_finish_button(query, context)  # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è

async def handle_marking(update: Update, context):
    query = update.callback_query
    await query.answer()

    parts = query.data.split("_")
    action = parts[0]
    mark = parts[1]
    student_id = parts[2]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –≤–º–µ—Å—Ç–æ –∏–º–µ–Ω–∏

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ student_mapping
    student_mapping = context.user_data.get('student_mapping', {})
    student_name = student_mapping.get(student_id)

    if not student_name:  # –ï—Å–ª–∏ –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    MARK_EMOJIS = {
        "2": "2Ô∏è‚É£",
        "3": "3Ô∏è‚É£",
        "4": "4Ô∏è‚É£",
        "5": "5Ô∏è‚É£",
        "present": "‚úÖ",
        "absent": "‚ùå",
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ —É–±–∏—Ä–∞–µ–º –æ—Ü–µ–Ω–∫—É
    selected_marks = context.user_data.get('marks', {})
    if action == "mark":
        if selected_marks.get(student_name) == MARK_EMOJIS[mark]:
            selected_marks.pop(student_name, None)  # –£–±–∏—Ä–∞–µ–º –æ—Ü–µ–Ω–∫—É, –µ—Å–ª–∏ —Ç–∞ –∂–µ —Å–∞–º–∞—è
        else:
            selected_marks[student_name] = MARK_EMOJIS[mark]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –æ—Ü–µ–Ω–∫—É

        context.user_data['marks'] = selected_marks

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    current_group_number = context.user_data.get('current_group_number', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞")
    current_mark = selected_marks.get(student_name, "")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    keyboard = generate_student_keyboard(student_id)
    await query.edit_message_text(
        f"–ì—Ä—É–ø–ø–∞: <b>{current_group_number}</b>\n\n<i>{student_name}</i> {current_mark}",
        parse_mode="HTML",
        reply_markup=keyboard
    )

async def navigate_student(update: Update, context, direction):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏

    sorted_students = context.user_data.get('sorted_students', [])
    current_index = context.user_data.get('current_student_index', 0)
    current_group_number = context.user_data.get('current_group_number', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞")
    selected_groups = context.user_data.get('selected_groups', [])
    current_group_index = context.user_data.get('current_group_index', 0)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å —Å—Ç—É–¥–µ–Ω—Ç–∞
    new_index = current_index + direction

    if new_index < 0:  # –ï—Å–ª–∏ –∏–¥—ë–º –Ω–∞–∑–∞–¥ –∑–∞ –Ω–∞—á–∞–ª–æ –≥—Ä—É–ø–ø—ã
        if current_group_index > 0:  # –ï—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∞—è –≥—Ä—É–ø–ø–∞
            await navigate_group(update, context, -1)
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
            context.user_data['current_student_index'] = len(context.user_data['sorted_students']) - 1
        else:  # –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞–∑–∞–¥, –æ—Å—Ç–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–º —Å—Ç—É–¥–µ–Ω—Ç–µ
            return
    elif new_index >= len(sorted_students):  # –ï—Å–ª–∏ –∏–¥—ë–º –¥–∞–ª—å—à–µ –∫–æ–Ω—Ü–∞ –≥—Ä—É–ø–ø—ã
        if current_group_index < len(selected_groups) - 1:  # –ï—Å—Ç—å —Å–ª–µ–¥—É—é—â–∞—è –≥—Ä—É–ø–ø–∞
            await navigate_group(update, context, 1)
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
            context.user_data['current_student_index'] = 0
        else:  # –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –≤–ø–µ—Ä—ë–¥, –æ—Å—Ç–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–º —Å—Ç—É–¥–µ–Ω—Ç–µ
            return
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å —Å—Ç—É–¥–µ–Ω—Ç–∞
        context.user_data['current_student_index'] = new_index

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –≥—Ä—É–ø–ø—ã
    sorted_students = context.user_data.get('sorted_students', [])
    current_index = context.user_data['current_student_index']
    student_name = sorted_students[current_index]

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫–∏
    selected_marks = context.user_data.get('marks', {})
    mark_text = selected_marks.get(student_name, "")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = generate_student_keyboard(generate_student_id(student_name))

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    current_group_number = context.user_data['current_group_number']
    await query.edit_message_text(
        f"–ì—Ä—É–ø–ø–∞: <b>{current_group_number}</b>\n\n<i>{student_name}</i> {mark_text}",
        parse_mode="HTML",
        reply_markup=keyboard
    )



async def navigate_group(update: Update, context, direction):
    selected_groups = context.user_data.get('selected_groups', [])
    current_group_index = context.user_data.get('current_group_index', 0)
    new_index = current_group_index + direction

    if 0 <= new_index < len(selected_groups):
        context.user_data['current_group_index'] = new_index
        new_group = selected_groups[new_index]
        context.user_data['current_group_number'] = new_group  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
        students = db_functions.get_students_by_group(new_group)
        if not students:
            await update.callback_query.edit_message_text("‚ö†Ô∏è –í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
            return

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        sorted_students = sorted(students, key=lambda x: x[0])
        context.user_data['sorted_students'] = sorted_students
        context.user_data['current_student_index'] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ student_id ‚Üí student_name
        student_mapping = {generate_student_id(name): name for name in sorted_students}
        context.user_data['student_mapping'] = student_mapping

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
        student_name = sorted_students[0]
        selected_marks = context.user_data.get('marks', {})
        mark_text = selected_marks.get(student_name, "")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard = generate_student_keyboard(generate_student_id(student_name))

        await update.callback_query.edit_message_text(
            f"–ì—Ä—É–ø–ø–∞: <b>{new_group}</b>\n\n<i>{student_name}</i> {mark_text}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

async def show_finish_button(update: Update, context):
    # –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è
    finish_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ", callback_data="finish_session")]
    ])
    await update.message.reply_text("–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=finish_keyboard)

async def handle_finish_session(update: Update, context):
    query = update.callback_query
    await query.answer()
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è
    confirm_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_finish")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_finish")]
    ])
    await query.edit_message_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫–∏?",
        reply_markup=confirm_keyboard
    )

async def confirm_finish_session(update: Update, context):
    query = update.callback_query
    await query.answer()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    selected_marks = context.user_data.get('marks', {})
    selected_subject = context.user_data.get('selected_subject')
    for student, mark in selected_marks.items():
        db_functions.save_mark(student, selected_subject, mark)

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    context.user_data.clear()

    # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    reply_markup = ReplyKeyboardMarkup(
        [['üìö –î–æ–±–∞–≤–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É', 'üìÖ –ü—Ä–æ–≤–µ—Å—Ç–∏ –∑–∞–Ω—è—Ç–∏–µ']],
        resize_keyboard=True
    )
    await query.edit_message_text("‚úÖ –ó–∞–Ω—è—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û—Ü–µ–Ω–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def cancel_finish_session(update: Update, context):
    query = update.callback_query
    await query.answer()

    # –í–µ—Ä–Ω—É—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è
    await show_finish_button(query, context)


def main():
    application = ApplicationBuilder().token("7500268240:AAEtuPOniFFCnaHSW55eUfe392egvxDONWU").build()

    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("üîç –í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç"), view_subjects))

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT, ask_name)],
            CHOOSE_STATUS: [MessageHandler(filters.TEXT, choose_status)],
            ENTER_CODE: [MessageHandler(filters.TEXT, enter_code)],
            ADD_GROUP: [MessageHandler(filters.TEXT, add_group)],
            ENTER_GROUP: [MessageHandler(filters.TEXT, enter_group)],
            ENTER_ANOTHER_MEMBER: [MessageHandler(filters.TEXT, enter_another_member)],
            CONFIRM_GROUP: [MessageHandler(filters.TEXT, confirm_group_action)],
            ADD_SUBJECT: [
                MessageHandler(filters.TEXT & filters.Regex("üìÖ –ü—Ä–æ–≤–µ—Å—Ç–∏ –∑–∞–Ω—è—Ç–∏–µ"), conduct_class),
                MessageHandler(filters.TEXT, add_subject),
            ],
            JOIN_SUBJECT: [
                MessageHandler(filters.TEXT, join_subject),
                CallbackQueryHandler(select_subject)  
            ],

            SELECT_SUBJECT: [
                CallbackQueryHandler(select_class_subject, pattern="^conduct_"),
                CallbackQueryHandler(select_subject)    # —Å—É–∫–∞ –∏–∑-–∑–∞ —ç—Ç–æ–≥–æ –Ω–∏—á—ë –Ω–µ —Ä–∞–±–æ—Ç–∞–ª–æ, –∫–∞–∫–æ–π –∏–¥–∏–æ—Ç —É–±—Ä–∞–ª?
            ],
            CREATE_SUBJECT: [MessageHandler(filters.TEXT, save_subject)],
            CHOOSE_GROUP: [CallbackQueryHandler(toggle_group_selection)],
            MARK_STUDENT: [MessageHandler(filters.TEXT, start_marking_students)],  # –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è MARK_STUDENT
            },
        fallbacks=[CommandHandler("cancel", cancel)]
    )


    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º
    application.add_handler(CallbackQueryHandler(handle_teacher_response, pattern="^(approve_|reject_)"))

    application.add_handler(CallbackQueryHandler(handle_marking, pattern=r"mark_\w+_\w+"))

    application.add_handler(CallbackQueryHandler(lambda u, c: navigate_student(u, c, -1), pattern="^prev_student$"))
    application.add_handler(CallbackQueryHandler(lambda u, c: navigate_student(u, c, 1), pattern="^next_student$"))
    application.add_handler(CallbackQueryHandler(lambda u, c: navigate_group(u, c, -1), pattern="^move_back$"))
    application.add_handler(CallbackQueryHandler(lambda u, c: navigate_group(u, c, 1), pattern="^move_forward$"))

    application.add_handler(CallbackQueryHandler(handle_finish_session, pattern="^finish_session$"))
    application.add_handler(CallbackQueryHandler(confirm_finish_session, pattern="^confirm_finish$"))
    application.add_handler(CallbackQueryHandler(cancel_finish_session, pattern="^cancel_finish$"))



    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == "__main__":
    main()
     
      