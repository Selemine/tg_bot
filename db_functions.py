from datetime import datetime
import sqlite3
import logging

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger()

def create_tables():
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()

    logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
    
    cursor.execute(""" 
        CREATE TABLE IF NOT EXISTS marks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            student TEXT,
            subject TEXT,
            teacher_name TEXT,
            group_number TEXT,  
            date TEXT,
            mark INTEGER
        )
    """)
    
    cursor.execute(""" 
        CREATE TABLE IF NOT EXISTS groups (
            group_id INTEGER PRIMARY KEY AUTOINCREMENT,
            group_number TEXT,
            leader_name TEXT
        )
    """)
    cursor.execute(""" 
        CREATE TABLE IF NOT EXISTS members (
            member_id INTEGER PRIMARY KEY AUTOINCREMENT,
            group_number TEXT,
            member_name TEXT
        )
    """)
    cursor.execute(""" 
        CREATE TABLE IF NOT EXISTS subjects (
            subject_id INTEGER PRIMARY KEY AUTOINCREMENT,
            subject_name TEXT,
            teacher_name TEXT
        )
    """)
    cursor.execute(""" 
        CREATE TABLE IF NOT EXISTS group_subjects (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            group_number TEXT,
            subject_name TEXT
        )
    """)
    cursor.execute(""" 
        CREATE TABLE IF NOT EXISTS teachers (
            teacher_name TEXT PRIMARY KEY,
            chat_id INTEGER
        )
    """)
    cursor.execute(""" 
        CREATE TABLE IF NOT EXISTS student_marks (
            student_name TEXT PRIMARY KEY,
            mark TEXT
        )
    """)

    conn.commit()
    conn.close()

def connect_to_database():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite."""
    return sqlite3.connect('database.db')  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

def create_group(group_number, leader_name):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    try:
        logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã {group_number} —Å –ª–∏–¥–µ—Ä–æ–º {leader_name}")
        cursor.execute("INSERT INTO groups (group_number, leader_name) VALUES (?, ?)", (group_number, leader_name))
        conn.commit()
        logger.debug(f"–ì—Ä—É–ø–ø–∞ {group_number} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å –ª–∏–¥–µ—Ä–æ–º {leader_name}")

        logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ—Å—Ç—ã {leader_name} –≤ —Ç–∞–±–ª–∏—Ü—É members –¥–ª—è –≥—Ä—É–ø–ø—ã {group_number}")
        cursor.execute("INSERT INTO members (member_name, group_number) VALUES (?, ?)", (leader_name, group_number))
        conn.commit()
        logger.debug(f"–°—Ç–∞—Ä–æ—Å—Ç–∞ {leader_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É members –≤ –≥—Ä—É–ø–ø—É {group_number}")
    except sqlite3.IntegrityError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}")
    finally:
        conn.close()

def add_member(member_name, group_number):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO members (member_name, group_number) VALUES (?, ?)", (member_name, group_number))
    conn.commit()
    conn.close()

def add_subject(subject_name, teacher_name):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO subjects (subject_name, teacher_name) VALUES (?, ?)", (subject_name, teacher_name))
    conn.commit()
    conn.close()

def get_subjects():
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT subject_name FROM subjects")
    subjects = cursor.fetchall()
    conn.close()
    return [subject[0] for subject in subjects]

def get_group_subjects(group_number):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT subject_name FROM group_subjects WHERE group_number = ?", (group_number,))
    subjects = cursor.fetchall()
    conn.close()
    return [subject[0] for subject in subjects]

def get_all_subjects_with_teachers():
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT subject_name, teacher_name FROM subjects")
    subjects = cursor.fetchall()
    conn.close()
    return subjects 

def add_group_to_subject(group_number, subject_name):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO group_subjects (group_number, subject_name) VALUES (?, ?)", (group_number, subject_name))
        conn.commit()
        logger.debug(f"–ì—Ä—É–ø–ø–∞ {group_number} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ {subject_name}")
    except sqlite3.IntegrityError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã –∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ: {e}")
    finally:
        conn.close()

def get_teacher_by_subject(subject_name):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT teacher_name FROM subjects WHERE subject_name = ?", (subject_name,))
    teacher = cursor.fetchone()
    conn.close()
    return teacher[0] if teacher else None

def get_teacher_chat_id(teacher_name):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT chat_id FROM teachers WHERE teacher_name = ?", (teacher_name,))
    teacher = cursor.fetchone()
    conn.close()
    return teacher[0] if teacher else None

def add_teacher(teacher_name, chat_id):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO teachers (teacher_name, chat_id) 
        VALUES (?, ?)
        ON CONFLICT(teacher_name) DO UPDATE SET chat_id = ?
    """, (teacher_name, chat_id, chat_id))
    conn.commit()
    conn.close()

def update_teacher_chat_id(teacher_name, chat_id):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("UPDATE teachers SET chat_id = ? WHERE teacher_name = ?", (chat_id, teacher_name))
    conn.commit()
    conn.close()

def get_leader_chat_id(group_number):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT leader_name FROM groups WHERE group_number = ?", (group_number,))
        leader = cursor.fetchone()
        logger.debug(f"–°—Ç–∞—Ä–æ—Å—Ç–∞ –≥—Ä—É–ø–ø—ã {group_number}: {leader}")

        if leader:
            cursor.execute("SELECT chat_id FROM teachers WHERE teacher_name = ?", (leader[0],))
            chat_id = cursor.fetchone()
            logger.debug(f"Chat ID —Å—Ç–∞—Ä–æ—Å—Ç—ã: {chat_id}")

            return chat_id[0] if chat_id else None
    except sqlite3.IntegrityError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ chat ID —Å—Ç–∞—Ä–æ—Å—Ç—ã: {e}")
    finally:
        conn.close()
    return None

def get_student_group(full_name):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT group_number FROM members WHERE member_name = ?", (full_name,))
        group = cursor.fetchone()
        return group[0] if group else None
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {full_name}: {e}")
        return None
    finally:
        conn.close()

def get_student_group_info(full_name):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()

    logger.debug(f"–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ –¥–ª—è: {full_name}")

    cursor.execute("""
        SELECT group_number
        FROM members
        WHERE member_name = ?
    """, (full_name,))
    group_numbers = cursor.fetchall()

    logger.debug(f"–ì—Ä—É–ø–ø—ã, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {full_name}: {group_numbers}")

    if group_numbers:
        groups_info = []
        for group_number in group_numbers:
            group_number = group_number[0]

            cursor.execute("""
                SELECT leader_name
                FROM groups
                WHERE group_number = ?
            """, (group_number,))
            leader = cursor.fetchone()

            logger.debug(f"–°—Ç–∞—Ä–æ—Å—Ç–∞ –≥—Ä—É–ø–ø—ã {group_number}: {leader}")

            if leader:
                leader = leader[0]
            else:
                logger.debug(f"–°—Ç–∞—Ä–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã {group_number}")
                leader = "–ù–µ—Ç —Å—Ç–∞—Ä–æ—Å—Ç—ã"

            cursor.execute("""
                SELECT member_name
                FROM members
                WHERE group_number = ?
            """, (group_number,))
            members = cursor.fetchall()

            logger.debug(f"–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã {group_number}: {members}, –°—Ç–∞—Ä–æ—Å—Ç–∞: {leader}")

            number_of_members = len(members)
            group_info_text = f"     <u>{group_number}</u>     \n"
            group_info_text += "\n"
            group_info_text += f"<i>–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã ({number_of_members})</i>\n"
            group_info_text += "\n"
            sorted_members = sorted([member[0] for member in members])
            for member in sorted_members:
                if member == leader:
                    group_info_text += f"<b>{member}</b>  üë®‚Äçüéì\n"
                else:
                    group_info_text += f"{member}\n"
            groups_info.append(group_info_text)

        conn.close()
        return "\n\n".join(groups_info)

    conn.close()
    return None

def is_group_already_joined(group_number, subject):
    conn = sqlite3.connect('database.db')  
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM group_subjects WHERE group_number = ? AND subject_name = ?", (group_number, subject))
    result = cursor.fetchone()
    conn.close()
    return result is not None

def check_table_exists():
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='group_subjects'")
    table = cursor.fetchone()
    conn.close()
    if table:
        print("–¢–∞–±–ª–∏—Ü–∞ group_subjects —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        print("–¢–∞–±–ª–∏—Ü–∞ group_subjects –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

check_table_exists()

def get_subjects_for_group(group_number):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()

    query = """
        SELECT subject_name
        FROM group_subjects
        WHERE group_number = ?
    """
    cursor.execute(query, (group_number,))
    subjects = cursor.fetchall()
    
    conn.close()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    return [subject[0] for subject in subjects]

def get_subjects_by_teacher(teacher_name):
    all_subjects_with_teachers = get_all_subjects_with_teachers()
    subjects = [subject for subject, teacher in all_subjects_with_teachers if teacher == teacher_name]
    return subjects

def get_groups_by_subject(subject_name):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    try:
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ: {subject_name}")
        cursor.execute("""
            SELECT DISTINCT group_number
            FROM group_subjects
            WHERE subject_name = ?
        """, (subject_name,))
        result = cursor.fetchall()
        logger.debug(f"–ù–∞–π–¥–µ–Ω—ã –≥—Ä—É–ø–ø—ã –¥–ª—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã {subject_name}: {result}")
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø –¥–ª—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã {subject_name}: {e}")
        return []
    finally:
        conn.close()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –≥—Ä—É–ø–ø
    return [row[0] for row in result]

def get_students_by_group(group_number):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    try:
        logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã: {group_number}")  
        cursor.execute("SELECT member_name FROM members WHERE group_number = ?", (group_number,))
        students = cursor.fetchall()
        if not students:
            logger.warning(f"–î–ª—è –≥—Ä—É–ø–ø—ã {group_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
        else:
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {len(students)}. –°–ø–∏—Å–æ–∫: {[student[0] for student in students]}")

        return [student[0] for student in students]  
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_number}: {e}")
        return []
    finally:
        conn.close()
        logger.info(f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

def mark_student(student_name, mark):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()

    try:
        current_date = datetime.now().strftime('%Y-%m-%d')

        cursor.execute("""
            INSERT INTO student_marks (student_name, mark)
            VALUES (?, ?)
            ON CONFLICT(student_name) DO UPDATE SET mark = ?, date = ?
        """, (student_name, mark, mark, current_date))
        conn.commit()
        logger.debug(f"–û—Ü–µ–Ω–∫–∞ {mark} –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_name} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å –¥–∞—Ç–æ–π {current_date}.")
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_name}: {e}")
    finally:
        conn.close()

def save_mark(student_name, subject, mark):
    try:
        current_date = datetime.now().strftime('%Y-%m-%d')
        connection = sqlite3.connect('database.db')
        cursor = connection.cursor()
        cursor.execute("""
            INSERT INTO marks (student, subject, date, mark) 
            VALUES (?, ?, ?, ?)
        """, (student_name, subject, current_date, mark))
        connection.commit()
        connection.close()
        logger.debug(f"–û—Ü–µ–Ω–∫–∞ {mark} –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_name} –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å –¥–∞—Ç–æ–π {current_date}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_name}: {e}")

def add_student_column_if_needed():
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("PRAGMA table_info(marks)")
    columns = cursor.fetchall()
    if not any(col[1] == 'student' for col in columns):
        logger.debug("–°—Ç–æ–ª–±–µ—Ü 'student' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –î–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Ç–∞–±–ª–∏—Ü—É 'marks'.")
        cursor.execute("ALTER TABLE marks ADD COLUMN student TEXT")
        conn.commit()
    
    conn.close()

def get_student_grades(student_name):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    try:
        logger.debug(f"–ó–∞–ø—Ä–æ—Å –æ—Ü–µ–Ω–æ–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞: {student_name}")
        cursor.execute("SELECT subject, date, mark FROM marks WHERE student = ?", (student_name,))
        grades = cursor.fetchall()
        logger.debug(f"–ù–∞–π–¥–µ–Ω–æ –æ—Ü–µ–Ω–æ–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_name}: {grades}")
        return grades  
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ü–µ–Ω–æ–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_name}: {e}")
        return []
    finally:
        conn.close()

def get_group_subjects_with_grades(group_number):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("""
        SELECT subject_name, student, mark, date 
        FROM marks 
        WHERE group_number = ?
    """, (group_number,))
    
    rows = cursor.fetchall()
    conn.close()
    
    if not rows:
        return []
    
    subjects_with_grades = {}
    for subject, student, mark, date in rows:
        if subject not in subjects_with_grades:
            subjects_with_grades[subject] = []
        subjects_with_grades[subject].append({
            'student': student,
            'mark': mark,
            'date': date
        })
    
    return subjects_with_grades

def get_marks_for_subject(subject, group=None, student_name=None):
    try:
        conn = sqlite3.connect("database.db")
        cursor = conn.cursor()
        logger.debug(f"–ó–∞–ø—Ä–æ—Å –æ—Ü–µ–Ω–æ–∫ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject} –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_name}")
        
        if student_name:
            query = """
                SELECT date, mark
                FROM marks
                WHERE subject = ? AND student = ?
                ORDER BY date DESC
            """
            cursor.execute(query, (subject, student_name))
        elif group:
            query = """
                SELECT date, mark
                FROM marks
                WHERE subject = ? AND group_number = ?
                ORDER BY date DESC
            """
            cursor.execute(query, (subject, group))
        else:
            query = """
                SELECT date, mark
                FROM marks
                WHERE subject = ?
                ORDER BY date DESC
            """
            cursor.execute(query, (subject,))
        
        marks_info = cursor.fetchall()
        conn.close()

        if not marks_info:
            logger.debug("–û—Ü–µ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return None
        return [{"date": mark[0], "mark": mark[1]} for mark in marks_info]

    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None
